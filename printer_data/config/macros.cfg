[include K-ShakeTune/*.cfg]

#####################################################################
#   A better print_start macro for v2/trident
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Nevermore (if you have one)
## Z_TILT_ADJUST (For Trident only)
## QUAD_GANTRY_LEVEL (For V2.4 only)

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed, extruder, and chamber temps and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("45")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  SET_GCODE_OFFSET Z=0                                 # Set offset to 0

  # Home the printer, set absolute positioning and update the Stealthburner LEDs.
  # STATUS_HOMING                                         # Set LEDs to homing-mode
  G28                                                   # Full home (XYZ)
  G90                                                   # Absolute position

  ##  Uncomment for bed mesh (1 of 2 for bed mesh)
  BED_MESH_CLEAR                                       # Clear old saved bed mesh (if any)

  # Check if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    # STATUS_HEATING                                      # Set LEDs to heating-mode
    M106 S255                                           # Turn on the PT-fan

    ##  Uncomment if you have a Nevermore.
    # SET_PIN PIN=filter VALUE=1                      # Turn on the nevermore

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Display info on display
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber temp

  # If the bed temp is not over 90c, then skip the heatsoak and just heat up to set temp with a 5 min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    # STATUS_HEATING                                      # Set LEDs to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5 min"               # Display info on display
    G4 P300000                                          # Wait 5 min for the bedtemp to stabilize
  {% endif %}

  # Heat hotend to 150c. This helps with getting a correct Z-home.
  SET_DISPLAY_TEXT MSG="Hotend: 150c"                   # Display info on display
  M109 S150                                             # Heat hotend to 150c

  ##  Uncomment for Trident (Z_TILT_ADJUST)
  SET_DISPLAY_TEXT MSG="Leveling"                      # Display info on display
  STATUS_LEVELING                                      # Set LEDs to leveling-mode
  Z_TILT_ADJUST                                        # Level the printer via Z_TILT_ADJUST
  G28 Z                                                # Home Z again after Z_TILT_ADJUST

  ##  Uncomment for bed mesh (2 of 2 for bed mesh)
  SET_DISPLAY_TEXT MSG="Bed mesh"                      # Display info on display
  # STATUS_MESHING                                       # Set LEDs to bed mesh-mode
  BED_MESH_CALIBRATE                                   # Start the bed mesh (add ADAPTIVE=1) for adaptive bed mesh

  SET_DISPLAY_TEXT MSG="Brushing" 
  AFC_BRUSH
  SET_DISPLAY_TEXT MSG="Surveying" 
  CARTOGRAPHER_TOUCH                                    # Calibrate z offset only with hot nozzle
  AFC_PARK
  
  # Heat up the hotend up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"     # Display info on display
  STATUS_HEATING                                        # Set LEDs to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                      # Go to center of the bed
  M107                                                  # Turn off partcooling fan
  M109 S{target_extruder}                               # Heat the hotend to set temp

 #Load initial filament
  SET_DISPLAY_TEXT MSG="Loading filament"
  T{initial_tool} #Load Initial Tool

  # Get ready to print by doing a primeline and updating the LEDs
  SET_DISPLAY_TEXT MSG="Printer goes brr"               # Display info on display
  STATUS_PRINTING                                       # Set LEDs to printing-mode
  G0 X{x_wait - 50} Y4 F10000                           # Go to starting point
  G0 Z0.4                                               # Raise Z to 0.4
  G91                                                   # Incremental positioning 
  G1 X100 E20 F1000                                     # Primeline
  G90                                                   # Absolute position

# Copyright (C) 2022 Justin Schuh <code@justinschuh.com>
#
# This file may be distributed under the terms of the GNU GPLv3 license.

[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-3 F300
    # Raise nozzle by 10mm
    G1 Z10 F3000
    G90
    # Disable steppers
    M84

[gcode_macro park]
description: Park the toolhead
  Usage: PARK [P=<0|1|2>] [X=<pos>] [Y=<pos>] [Z=<pos>] [LAZY=<1|0>]
gcode:
  {% set km = printer["gcode_macro _km_globals"] %}
  {% set LAZY = params.LAZY|default(1)|int %}
  {% if printer.toolhead.homed_axes != "xyz" %}
    {% if LAZY %}
      LAZY_HOME
    {% else %}
      {action_raise_error("Must home axes first.")}
    {% endif %}
  {% endif %}

  # Z position type from G27 (if below, absolute, relative)
  {% set P = (params.P|default(2))|int %} # Default to 2 because it's sanest.
  {% set X = params.X|default(km.park_x)|float %}
  {% set Y = params.Y|default(km.park_y)|float %}
  {% set Z = params.Z|default(km.park_z)|float %}

  M400
  _CHECK_KINEMATIC_LIMITS X="{X}" Y="{Y}" Z="{Z}"
  _PARK_INNER X="{X}" Y="{Y}" Z="{Z}" P="{P}" LAZY="{LAZY}"
  # Dummy argument block for Mainsail
  {% set dummy = None if True else "
  {% set dummy = params.P|default(mode=<0|1|2>)|int %}
  {% set dummy = params.X|default(X position)|int %}
  {% set dummy = params.Y|default(Y position)|int %}
  {% set dummy = params.Z|default(Z position)|int %}
  " %} # End argument block for Mainsail

[gcode_macro _park_inner]
gcode:
  {% set km = printer["gcode_macro _km_globals"] %}
  {% set travel_speed_xy = km.travel_speed_xy %}
  {% set travel_speed_z = km.travel_speed_z %}

  {% set position = printer.gcode_move.gcode_position %}
  {% set origin = printer.gcode_move.homing_origin%}

  # Use the taller of the highest printed layer or the current Z height, which
  # should help avoid crashes (e.g. when a sequential print in progress).
  {% set clearance_z = (printer["gcode_macro _km_layer_run"].clearance_z,
                        position.z) | max %}
  {% set P = params.P|int %}
  {% set X = params.X|float - origin.x %}
  {% set Y = params.Y|float - origin.y %}
  {% set Z = params.Z|float %}
  {% set LAZY = params.LAZY|int %}

  # Convert everything to absolute coordinates.
  {% if P == 0 %} # Move absolute to Z if below current Z
    {% if clearance_z > Z %}
      {% set Z = clearance_z %}
    {% endif %}
  {% elif P == 1 %} # Move Z absolute.
      {% set Z = Z - origin.z %}
  {% elif P == 2 %} # Move Z relative
    {% set Z = Z + clearance_z %}
  {% else %}
    {action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." |
        format(P)) }
  {% endif %}

  # Clamp to the printer limits.
  {% set Z = ((Z, printer.toolhead.axis_maximum.z - origin.z)|min,
              printer.toolhead.axis_minimum.z - origin.z)|max %}

  # Don't move if it's a lazy park and we're already in position.
  {% if (not LAZY) or P != 2 or X != position.x or Y != position.y 
        or Z < clearance_z %}
    SAVE_GCODE_STATE NAME=_KM_PARK
    G90
    G0 Z{Z} F{travel_speed_z}
    G0 X{X} Y{Y} F{travel_speed_xy}
    RESTORE_GCODE_STATE NAME=_KM_PARK MOVE=0
  {% endif %}


[gcode_macro g27]
description: Parks the toolhead.
  Usage: G27 [P=<0|1|2>]
gcode:
  # Wraps any arguments for the PARK macro and defaults P=0 for Marlin compat.
  PARK P={params.P|default(0)} {% for k in params|reject("in", "GP") %}{
    ' '~k~'="'~params[k]~'"'
    }{% endfor %}
  
# [gcode_macro PAUSE]
# rename_existing: BASE_PAUSE
# gcode:
#     # Parameters
#     {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

#     {% if printer['pause_resume'].is_paused|int == 0 %}
#         SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
#         SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

#         SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
#         SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
#         BASE_PAUSE                                                                           ; pause print
#         {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
#             G91                                                                              ; relative positioning
#             G1 Z{z} F900                                                                     ; raise Z up by z hop amount
#         {% else %}
#             { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
#             SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
#         {% endif %}
#         G90                                                                                  ; absolute positioning
#         G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
#         SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
#         M104 S0                                                                              ; turn off hotend
#         SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
#     {% endif %}
	
# [gcode_macro RESUME]
# rename_existing: BASE_RESUME
# variable_zhop: 0
# variable_etemp: 0
# gcode:
#     # Parameters
#     {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

#     {% if printer['pause_resume'].is_paused|int == 1 %}
#         SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
#         #INITIAL_RGB                                                                    ; reset LCD color
#         SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
#         {% if etemp > 0 %}
#             M109 S{etemp|int}                                                        ; wait for hotend to heat back up
#         {% endif %}
#         RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
#         G91                                                                          ; relative positioning
#         M83                                                                          ; relative extruder positioning
#         {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
#             G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
#         {% else %}
#             G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
#         {% endif %}
#         RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
#         BASE_RESUME                                                                  ; resume print
#     {% endif %}
	
[gcode_macro _HOME_X]
gcode = 
	
	{% set RUN_CURRENT_X = printer.configfile.settings['tmc5160 stepper_x'].run_current|float %}
	{% set RUN_CURRENT_Y = printer.configfile.settings['tmc5160 stepper_y'].run_current|float %}
	{% set HOME_CURRENT = 0.80%}
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
	
	SET_KINEMATIC_POSITION X=15
	G91
	G1 X-15 F1200
	
	G4 P2000
	G28 X
	
	
	G91
	G1 X-15 F1200
	
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Y]
gcode = 
	{% set RUN_CURRENT_X = printer.configfile.settings['tmc5160 stepper_x'].run_current|float %}
	{% set RUN_CURRENT_Y = printer.configfile.settings['tmc5160 stepper_y'].run_current|float %}
	{% set HOME_CURRENT =0.75%}
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
	
	SET_KINEMATIC_POSITION Y=15
	G91
	G1 Y-15 F1200
	G4 P2000
	
	G28 Y
	
	G91
	G1 Y-15 F1200
	
	
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro M701]
description = Map M701 to LOAD_FILAMENT
gcode = 
	LOAD_FILAMENT

[gcode_macro M702]
description = Map M702 to UNLOAD_FILAMENT
gcode = 
	UNLOAD_FILAMENT

[gcode_macro M600]
description = Map M600 to CHANGE_FILAMENT
gcode = 
	CHANGE_FILAMENT

[gcode_macro M125]
description = Map M125 to PARK
gcode = 
	PARK

[gcode_macro M900]
description = Map M900 to SET_PRESSURE_ADVANCE
gcode = 
	{% if 'K' in params %}
	{% if 'E' in params %}
	SET_PRESSURE_ADVANCE EXTRUDER={params.E} ADVANCE={params.K}
	{% else %}
	SET_PRESSURE_ADVANCE ADVANCE={params.K}
	{% endif %}
	{% endif %}

[gcode_macro M204]
description = Map M204 to SET_VELOCITY_LIMIT for ACCEL
rename_existing = M204.1
gcode = 
	{% if 'S' in params %}
	{% set S = params.S|float %}
	SET_VELOCITY_LIMIT ACCEL={S}
	{% endif %}

[gcode_macro M205]
description = Map M205 to SET_VELOCITY_LIMIT for SQUARE_CORNER_VELOCITY
gcode = 
	{% if 'X' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.X}
	{% elif 'Y' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.Y}
	{% endif %}

[gcode_macro G00]
gcode = 
	G0 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}

[gcode_macro G01]
gcode = 
	G1 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}

[gcode_macro G02]
gcode = 
	G2 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}

[gcode_macro G03]
gcode = 
	G2 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}

[gcode_macro G04]
gcode = 
	G4 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}

    [gcode_macro START_FILTER]
gcode = 
	{% set SPEED = params.SPEED|default(1)|float %}
	
	{% set filter_name = printer["gcode_macro _USER_VARIABLES"].filter_name %}
	SET_FAN_SPEED FAN={filter_name} SPEED={SPEED}

[gcode_macro STOP_FILTER]
gcode = 
	{% set filter_name = printer["gcode_macro _USER_VARIABLES"].filter_name %}
	SET_FAN_SPEED FAN={filter_name} SPEED=0

[delayed_gcode _STOP_FILTER_DELAYED]
gcode = 
	STOP_FILTER

    Quand gantry leveling definition
# If this files is included, then it also activate the QGL
# automatically in the START_PRINT macro
[gcode_macro _USER_VARIABLES]
variable_ztilt_enabled: True
gcode:

# Also include directly the dockable probe overide of qgl from here
[include macros/base/probing/overrides/z_tilt.cfg]
[include macros/base/homing/tilting.cfg]


[z_tilt]
z_positions:
    -50, 18
    150, 348
    350, 18
points:
    30, 5
    150, 245
    270, 5
speed: 100
horizontal_move_z: 12
retries: 5
retry_tolerance: 0.0075

# If this files is included, then it also activate the bed_mesh
# automatically in the START_PRINT macro
[gcode_macro _USER_VARIABLES]
variable_bed_mesh_enabled: True
gcode:

# Also include directly the dockable probe overide of BED_MESH_CALIBRATE from here
[include macros/base/probing/overrides/bed_mesh_calibrate.cfg]
# And also include the adaptive mesh macro at the same time
[include macros/calibration/adaptive_bed_mesh.cfg]

[gcode_macro _USER_VARIABLES]
variable_heaterbed_enabled: True
gcode:

[bed_mesh]
speed: 350
horizontal_move_z: 20
mesh_min: 25, 25
mesh_max: 275, 275
probe_count: 9, 9
fade_start: 0.6
fade_end: 10.0
algorithm: bicubic
zero_reference_position: 150, 150

#start_gcode module to turn the lights on
[gcode_macro _MODULE_CUSTOM1]
gcode:
   CARTOGRAPHER_TOUCH

[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh $0"
timeout: 90.0
verbose: True

# [gcode_button Filament_sensor]
# pin: EBBCan:PB5

[gcode_macro TAP_DATA]
gcode:
    G28
    G1 Z5 F1200
    M400 ; wait until motor movement finishes
    G4 P1000; wait a second so the printer doesn't shake
    CARTOGRAPHER_STREAM FILENAME=tapdata2mms.csv
    G1 Z-0.5 F120
    M400 ; wait until motor movement finishes
    G4 P1000; wait a second so the printer doesn't shake
    CARTOGRAPHER_STREAM FILENAME=tapdata2mms.csv
    G28
    G1 Z5 F1200
    M400 ; wait until motor movement finishes
    G4 P1000; wait a second so the printer doesn't shake
    CARTOGRAPHER_STREAM FILENAME=tapdata3mms.csv
    G1 Z-0.5 F200
    M400 ; wait until motor movement finishes
    G4 P1000; wait a second so the printer doesn't shake
    CARTOGRAPHER_STREAM FILENAME=tapdata3mms.csv


            